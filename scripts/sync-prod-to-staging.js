#!/usr/bin/env node

const { exec } = require('child_process')
const fs = require('fs')
const path = require('path')

console.log('üîÑ SINCRONIZA√á√ÉO: PRODU√á√ÉO ‚Üí STAGING')
console.log('====================================')
console.log('')

// Configura√ß√µes
const PROD_URL = process.env.DATABASE_URL || process.env.PROD_DATABASE_URL
const STAGING_URL = process.env.STAGING_DATABASE_URL || process.env.DATABASE_URL

// URLs de exemplo (substitua pelas suas)
const EXAMPLE_PROD = "postgresql://postgres.mahzeczsuklpnqstqqug:M%4022te24uss@aws-1-sa-east-1.pooler.supabase.com:5432/postgres"
const EXAMPLE_STAGING = "postgresql://postgres.staging:senha@staging-host.supabase.co:5432/postgres"

function showUsage() {
  console.log('üìã USO DO SCRIPT:')
  console.log('')
  console.log('üîß CONFIGURAR VARI√ÅVEIS DE AMBIENTE:')
  console.log('   export PROD_DATABASE_URL="sua-url-de-producao"')
  console.log('   export STAGING_DATABASE_URL="sua-url-de-staging"')
  console.log('')
  console.log('üöÄ EXECUTAR:')
  console.log('   node scripts/sync-prod-to-staging.js')
  console.log('')
  console.log('üìù OU USAR npm:')
  console.log('   npm run db:sync-staging')
  console.log('')
  console.log('‚ö†Ô∏è  IMPORTANTE:')
  console.log('   ‚Ä¢ Este script SOBRESCREVE todos os dados de staging')
  console.log('   ‚Ä¢ Fa√ßa backup antes se necess√°rio')
  console.log('   ‚Ä¢ Confirme as URLs antes de executar')
}

function validateURLs() {
  if (!PROD_URL) {
    console.error('‚ùå URL de produ√ß√£o n√£o configurada')
    console.error('   Configure: PROD_DATABASE_URL ou DATABASE_URL')
    return false
  }

  if (!STAGING_URL) {
    console.error('‚ùå URL de staging n√£o configurada')
    console.error('   Configure: STAGING_DATABASE_URL')
    return false
  }

  if (PROD_URL === STAGING_URL) {
    console.error('‚ùå URLs de produ√ß√£o e staging s√£o iguais!')
    console.error('   Risco de sobrescrever produ√ß√£o')
    return false
  }

  return true
}

async function confirmAction() {
  return new Promise((resolve) => {
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    })

    console.log('üîç CONFIGURA√á√ÉO DETECTADA:')
    console.log(`   üìä Produ√ß√£o: ${PROD_URL.replace(/:[^:@]*@/, ':***@')}`)
    console.log(`   üß™ Staging:  ${STAGING_URL.replace(/:[^:@]*@/, ':***@')}`)
    console.log('')
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Dados de staging ser√£o SOBRESCRITOS')
    console.log('')

    readline.question('‚ùì Continuar? (yes/N): ', (answer) => {
      readline.close()
      resolve(answer.toLowerCase() === 'yes')
    })
  })
}

async function executeCommand(command, description) {
  return new Promise((resolve, reject) => {
    console.log(`üîÑ ${description}...`)
    
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå Erro: ${error.message}`)
        reject(error)
        return
      }
      
      if (stderr) {
        console.log(`‚ö†Ô∏è  ${stderr}`)
      }
      
      if (stdout) {
        console.log(`‚ÑπÔ∏è  ${stdout}`)
      }
      
      console.log(`‚úÖ ${description} conclu√≠do`)
      resolve()
    })
  })
}

async function syncDatabases() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const backupFile = `temp-prod-backup-${timestamp}.sql`
    
    console.log('üìã PROCESSO DE SINCRONIZA√á√ÉO:')
    console.log('1Ô∏è‚É£ Backup da produ√ß√£o')
    console.log('2Ô∏è‚É£ Restaura√ß√£o no staging')
    console.log('3Ô∏è‚É£ Limpeza de arquivos tempor√°rios')
    console.log('')
    
    // Passo 1: Backup da produ√ß√£o
    const backupCommand = `pg_dump "${PROD_URL}" --verbose --no-owner --no-privileges --format=custom --file="${backupFile}"`
    
    await executeCommand(backupCommand, 'Fazendo backup da produ√ß√£o')
    
    // Verificar se arquivo foi criado
    if (!fs.existsSync(backupFile)) {
      throw new Error('Arquivo de backup n√£o foi criado')
    }
    
    const fileSize = fs.statSync(backupFile).size
    console.log(`üìä Tamanho do backup: ${(fileSize / 1024 / 1024).toFixed(2)} MB`)
    console.log('')
    
    // Passo 2: Restaura√ß√£o no staging
    const restoreCommand = `pg_restore --verbose --clean --no-acl --no-owner -d "${STAGING_URL}" "${backupFile}"`
    
    await executeCommand(restoreCommand, 'Restaurando no staging')
    
    // Passo 3: Limpeza
    console.log('üßπ Limpando arquivos tempor√°rios...')
    fs.unlinkSync(backupFile)
    console.log('‚úÖ Limpeza conclu√≠da')
    
    console.log('')
    console.log('üéâ SINCRONIZA√á√ÉO CONCLU√çDA COM SUCESSO!')
    console.log('')
    console.log('üìã PR√ìXIMOS PASSOS:')
    console.log('   üîç Verificar dados no staging')
    console.log('   üöÄ Testar aplica√ß√£o: npm run dev')
    console.log('   üìä Status: npm run env:status')
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error.message)
    console.log('')
    console.log('üîß POSS√çVEIS SOLU√á√ïES:')
    console.log('   ‚Ä¢ Verificar se pg_dump est√° instalado')
    console.log('   ‚Ä¢ Confirmar conectividade com os bancos')
    console.log('   ‚Ä¢ Verificar permiss√µes de acesso')
    console.log('   ‚Ä¢ Confirmar URLs de conex√£o')
    process.exit(1)
  }
}

async function main() {
  // Verificar argumentos
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showUsage()
    return
  }

  // Validar configura√ß√£o
  if (!validateURLs()) {
    console.log('')
    showUsage()
    process.exit(1)
  }

  // Confirmar a√ß√£o
  const confirmed = await confirmAction()
  if (!confirmed) {
    console.log('‚ùå Opera√ß√£o cancelada')
    process.exit(0)
  }

  // Executar sincroniza√ß√£o
  await syncDatabases()
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { syncDatabases }