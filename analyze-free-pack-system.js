const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function analyzeFreePackSystem() {
  console.log('üéÅ AN√ÅLISE DETALHADA: Sistema de Pacote Gratuito para Novos Usu√°rios\n')
  
  // Buscar dados do sistema atual
  console.log('üìä COLETANDO DADOS DO SISTEMA...\n')
  
  try {
    // Verificar quais packs existem
    const allPacks = await prisma.pack.findMany({
      where: { isActive: true },
      include: { 
        probabilities: true,
        customType: true 
      },
      orderBy: { price: 'asc' }
    })
    
    console.log('üì¶ PACOTES DISPON√çVEIS NO SISTEMA:')
    allPacks.forEach(pack => {
      console.log(`   ${pack.name}: ${pack.price} cr√©ditos`)
    })
    console.log('')
    
    // Verificar grants de pacotes gratuitos
    const freePackGrants = await prisma.freePackGrant.findMany({
      include: {
        pack: {
          include: { probabilities: true }
        },
        user: {
          select: { id: true, email: true, createdAt: true }
        }
      }
    })
    
    console.log(`üéÅ PACOTES GRATUITOS CONCEDIDOS: ${freePackGrants.length}`)
    if (freePackGrants.length > 0) {
      console.log('   üìã √öltimos grants:')
      freePackGrants.slice(-5).forEach(grant => {
        console.log(`      ${grant.pack.name} para ${grant.user.email} - ${grant.claimed ? 'Coletado' : 'Pendente'}`)
      })
    }
    console.log('')
    
    // Verificar hasReceivedFreePack nos usu√°rios
    const usersWithFreePack = await prisma.user.count({
      where: { hasReceivedFreePack: true }
    })
    
    const totalUsers = await prisma.user.count()
    
    console.log(`üë• USU√ÅRIOS E PACOTES GRATUITOS:`)
    console.log(`   üìä Total de usu√°rios: ${totalUsers}`)
    console.log(`   üéÅ Usu√°rios que receberam pack gratuito: ${usersWithFreePack}`)
    console.log(`   üìà Percentual: ${totalUsers > 0 ? ((usersWithFreePack / totalUsers) * 100).toFixed(1) : 0}%`)
    console.log('')
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Erro ao buscar dados:', error.message)
  }
  
  // An√°lise dos valores dos packs e qual seria ideal para novos usu√°rios
  console.log('üéØ AN√ÅLISE: Qual Pack √© Ideal para Novos Usu√°rios?\n')
  
  const packAnalysis = {
    'Pacote Bronze': {
      price: 25,
      realCost: 1.25,
      probabilities: {
        COMUM: 60,
        INCOMUM: 25,
        RARO: 10,
        EPICO: 4,
        LENDARIO: 1
      },
      pros: ['Baixo custo', 'Boa chance de itens √∫teis', 'N√£o quebra economia'],
      cons: ['Baixa chance de itens raros', 'Pode frustrar alguns usu√°rios']
    },
    'Pacote Prata': {
      price: 35,
      realCost: 1.75,
      probabilities: {
        COMUM: 48,
        INCOMUM: 30,
        RARO: 16,
        EPICO: 4,
        LENDARIO: 2
      },
      pros: ['Bom equil√≠brio', 'Maior chance de raros', 'Boa primeira impress√£o'],
      cons: ['Custo moderado', 'Pode ser muito generoso']
    },
    'Pacote Ouro': {
      price: 45,
      realCost: 2.25,
      probabilities: {
        COMUM: 35,
        INCOMUM: 32,
        RARO: 22,
        EPICO: 8,
        LENDARIO: 3
      },
      pros: ['Muito atrativo', 'Alta chance de bons itens', 'Excelente primeira impress√£o'],
      cons: ['Custo alto', 'Muito generoso', 'Pode viciar em packs premium']
    }
  }
  
  // Valores m√©dios por raridade (do sistema atual)
  const rarityValues = {
    COMUM: 13,
    INCOMUM: 24,
    RARO: 37,
    EPICO: 67,
    LENDARIO: 351
  }
  
  console.log('üí∞ AN√ÅLISE DETALHADA POR PACK:\n')
  
  Object.entries(packAnalysis).forEach(([packName, analysis]) => {
    console.log(`üì¶ ${packName}:`)
    console.log(`   üí∏ Custo real: R$ ${analysis.realCost}`)
    console.log(`   üí∞ Pre√ßo em cr√©ditos: ${analysis.price}`)
    
    // Calcular valor esperado
    let expectedValue = 0
    Object.entries(analysis.probabilities).forEach(([rarity, prob]) => {
      expectedValue += (prob / 100) * rarityValues[rarity]
    })
    
    const roi = ((expectedValue / analysis.price) * 100).toFixed(1)
    
    console.log(`   üìä Valor esperado: ${expectedValue.toFixed(1)} cr√©ditos`)
    console.log(`   üéØ ROI: ${roi}%`)
    
    console.log(`   ‚úÖ Pr√≥s:`)
    analysis.pros.forEach(pro => console.log(`      ‚Ä¢ ${pro}`))
    
    console.log(`   ‚ö†Ô∏è  Contras:`)
    analysis.cons.forEach(con => console.log(`      ‚Ä¢ ${con}`))
    
    console.log('')
  })
  
  // An√°lise de impacto no onboarding
  console.log('üöÄ AN√ÅLISE: Impacto no Onboarding de Usu√°rios\n')
  
  const onboardingScenarios = [
    {
      pack: 'Bronze',
      userExperience: 'Conservadora',
      description: 'Usu√°rio recebe itens b√°sicos, entende o sistema gradualmente',
      conversionRate: 'M√©dia',
      economicImpact: 'Baixo',
      recommendation: 'Seguro para volume alto de usu√°rios'
    },
    {
      pack: 'Prata', 
      userExperience: 'Equilibrada',
      description: 'Usu√°rio tem boa primeira impress√£o, v√™ potencial do jogo',
      conversionRate: 'Alta',
      economicImpact: 'Moderado',
      recommendation: 'Ideal para maioria dos casos'
    },
    {
      pack: 'Ouro',
      userExperience: 'Premium',
      description: 'Usu√°rio fica impressionado, quer continuar jogando',
      conversionRate: 'Muito Alta',
      economicImpact: 'Alto',
      recommendation: 'Para campanhas especiais ou usu√°rios VIP'
    }
  ]
  
  onboardingScenarios.forEach(scenario => {
    console.log(`üéØ CEN√ÅRIO ${scenario.pack.toUpperCase()}:`)
    console.log(`   üéÆ Experi√™ncia: ${scenario.userExperience}`)
    console.log(`   üìù Descri√ß√£o: ${scenario.description}`)
    console.log(`   üìà Taxa de convers√£o: ${scenario.conversionRate}`)
    console.log(`   üí∏ Impacto econ√¥mico: ${scenario.economicImpact}`)
    console.log(`   üí° Recomenda√ß√£o: ${scenario.recommendation}`)
    console.log('')
  })
  
  // Verificar configura√ß√£o atual no c√≥digo
  console.log('üîç VERIFICA√á√ÉO: Configura√ß√£o Atual do Sistema\n')
  
  try {
    // Buscar um usu√°rio exemplo para ver a configura√ß√£o
    const sampleUser = await prisma.user.findFirst({
      select: {
        hasReceivedFreePack: true,
        freePackGrants: {
          include: {
            pack: {
              include: { probabilities: true }
            }
          }
        }
      }
    })
    
    if (sampleUser && sampleUser.freePackGrants.length > 0) {
      const freePack = sampleUser.freePackGrants[0].pack
      console.log(`‚úÖ PACK GRATUITO CONFIGURADO: ${freePack.name}`)
      console.log(`   üí∞ Valor: ${freePack.price} cr√©ditos`)
      console.log(`   üé≤ Probabilidades:`)
      freePack.probabilities.forEach(prob => {
        console.log(`      ${prob.rarity}: ${prob.percentage}%`)
      })
    } else {
      console.log('‚ÑπÔ∏è  Nenhum pack gratuito encontrado nos registros')
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar configura√ß√£o atual')
  }
  
  console.log('')
  
  // Recomenda√ß√£o final baseada na an√°lise
  console.log('üèÜ RECOMENDA√á√ÉO FINAL:\n')
  
  console.log('üìä BASEADO NA AN√ÅLISE COMPLETA:')
  console.log('')
  console.log('ü•â BRONZE - Para volume alto:')
  console.log('   ‚Ä¢ Custo baixo (R$ 1,25)')
  console.log('   ‚Ä¢ Sustent√°vel economicamente')
  console.log('   ‚Ä¢ Boa para testes A/B')
  console.log('')
  console.log('ü•à PRATA - RECOMENDADO:')
  console.log('   ‚Ä¢ Custo moderado (R$ 1,75)')
  console.log('   ‚Ä¢ Excelente primeira impress√£o')
  console.log('   ‚Ä¢ ROI atrativo (83%)')
  console.log('   ‚Ä¢ 16% chance de raro + 6% chance de √©pico/lend√°rio')
  console.log('')
  console.log('ü•á OURO - Para eventos especiais:')
  console.log('   ‚Ä¢ Custo alto (R$ 2,25)')
  console.log('   ‚Ä¢ Muito atrativo')
  console.log('   ‚Ä¢ Para campanhas premium')
  console.log('')
  
  console.log('üí° ESTRAT√âGIA SUGERIDA:')
  console.log('   1. PADR√ÉO: Pack Prata para novos usu√°rios')
  console.log('   2. ESPECIAL: Pack Ouro para campanhas/eventos')
  console.log('   3. ECON√îMICO: Pack Bronze para testes de volume')
  console.log('')
  
  console.log('üîß IMPLEMENTA√á√ÉO RECOMENDADA:')
  console.log('   ‚Ä¢ Pack gratuito: PRATA')
  console.log('   ‚Ä¢ Sistema flex√≠vel para alterar durante eventos')
  console.log('   ‚Ä¢ Tracking de convers√£o por tipo de pack')
  console.log('   ‚Ä¢ A/B testing para otimizar')
  
  await prisma.$disconnect()
}

analyzeFreePackSystem().catch(console.error)