const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function analyzePackPricesWithRealValues() {
  console.log('üí∞ AN√ÅLISE: Pre√ßos dos Packs vs Valores Reais dos Pacotes de Cr√©ditos\n')
  
  // Dados dos pacotes de cr√©ditos (da imagem)
  const creditPackages = [
    { price: 2.00, credits: 30, efficiency: 15.0 },
    { price: 5.00, credits: 85, efficiency: 17.0 },
    { price: 10.00, credits: 200, efficiency: 20.0, popular: true },
    { price: 20.00, credits: 450, efficiency: 22.5 },
    { price: 35.00, credits: 800, efficiency: 22.9 },
    { price: 60.00, credits: 1400, efficiency: 23.3 },
    { price: 100.00, credits: 2400, efficiency: 24.0 }
  ]
  
  // Pre√ßos atuais dos packs
  const currentPacks = [
    { name: 'Bronze', price: 25, realValue: 25 / 20.0 }, // usando efici√™ncia popular
    { name: 'Prata', price: 40, realValue: 40 / 20.0 },
    { name: 'Ouro', price: 75, realValue: 75 / 20.0 },
    { name: 'Platina', price: 150, realValue: 150 / 20.0 },
    { name: 'Diamante', price: 300, realValue: 300 / 20.0 }
  ]
  
  // Pre√ßos propostos (Op√ß√£o 3)
  const proposedPacks = [
    { name: 'Bronze', price: 25, realValue: 25 / 20.0 },
    { name: 'Prata', price: 35, realValue: 35 / 20.0 },
    { name: 'Ouro', price: 50, realValue: 50 / 20.0 },
    { name: 'Platina', price: 85, realValue: 85 / 20.0 },
    { name: 'Diamante', price: 120, realValue: 120 / 20.0 }
  ]
  
  console.log('üìä PACOTES DE CR√âDITOS DISPON√çVEIS:')
  creditPackages.forEach(pkg => {
    const popular = pkg.popular ? ' ‚≠ê POPULAR' : ''
    console.log(`   R$ ${pkg.price.toFixed(2)} ‚Üí ${pkg.credits} cr√©ditos (${pkg.efficiency} cr√©ditos/real)${popular}`)
  })
  console.log('')
  
  console.log('üí∏ CUSTO REAL DOS PACKS ATUAIS:')
  currentPacks.forEach(pack => {
    console.log(`   üì¶ ${pack.name}: ${pack.price} cr√©ditos = R$ ${pack.realValue.toFixed(2)}`)
  })
  console.log('')
  
  console.log('üí° CUSTO REAL DOS PACKS PROPOSTOS:')
  proposedPacks.forEach(pack => {
    console.log(`   üì¶ ${pack.name}: ${pack.price} cr√©ditos = R$ ${pack.realValue.toFixed(2)}`)
  })
  console.log('')
  
  console.log('üîÑ COMPARA√á√ÉO: Antes vs Depois')
  console.log('')
  
  currentPacks.forEach((current, i) => {
    const proposed = proposedPacks[i]
    const savings = current.realValue - proposed.realValue
    const savingsPercent = ((savings / current.realValue) * 100).toFixed(1)
    
    console.log(`üì¶ ${current.name}:`)
    console.log(`   Atual: ${current.price} cr√©ditos (R$ ${current.realValue.toFixed(2)})`)
    console.log(`   Proposto: ${proposed.price} cr√©ditos (R$ ${proposed.realValue.toFixed(2)})`)
    
    if (savings > 0) {
      console.log(`   üí∞ Economia: R$ ${savings.toFixed(2)} (${savingsPercent}%)`)
    } else if (savings < 0) {
      console.log(`   üìà Aumento: R$ ${Math.abs(savings).toFixed(2)} (${Math.abs(savingsPercent)}%)`)
    } else {
      console.log(`   ‚úÖ Sem altera√ß√£o`)
    }
    console.log('')
  })
  
  // An√°lise de acessibilidade
  console.log('üéØ AN√ÅLISE DE ACESSIBILIDADE:')
  console.log('')
  
  console.log('SISTEMA ATUAL:')
  creditPackages.forEach(pkg => {
    console.log(`   üí≥ R$ ${pkg.price.toFixed(2)} (${pkg.credits} cr√©ditos):`)
    currentPacks.forEach(pack => {
      const canAfford = Math.floor(pkg.credits / pack.price)
      if (canAfford > 0) {
        console.log(`      üì¶ ${pack.name}: ${canAfford} packs`)
      }
    })
    console.log('')
  })
  
  console.log('SISTEMA PROPOSTO:')
  creditPackages.forEach(pkg => {
    console.log(`   üí≥ R$ ${pkg.price.toFixed(2)} (${pkg.credits} cr√©ditos):`)
    proposedPacks.forEach(pack => {
      const canAfford = Math.floor(pkg.credits / pack.price)
      if (canAfford > 0) {
        console.log(`      üì¶ ${pack.name}: ${canAfford} packs`)
      }
    })
    console.log('')
  })
  
  console.log('üèÜ CONCLUS√ÉO E RECOMENDA√á√ÉO:')
  console.log('')
  console.log('‚úÖ BENEF√çCIOS DA MUDAN√áA:')
  console.log('   ‚Ä¢ Packs mais acess√≠veis (at√© 60% mais baratos)')
  console.log('   ‚Ä¢ Melhor ROI para jogadores (85-90%)')
  console.log('   ‚Ä¢ Mais packs por pacote de cr√©ditos')
  console.log('   ‚Ä¢ Sistema equilibrado e justo')
  console.log('')
  console.log('üìä IMPACTO FINANCEIRO:')
  console.log('   ‚Ä¢ Bronze: R$ 1,25 ‚Üí Mantido')
  console.log('   ‚Ä¢ Prata: R$ 2,00 ‚Üí R$ 1,75 (-12.5%)')
  console.log('   ‚Ä¢ Ouro: R$ 3,75 ‚Üí R$ 2,50 (-33.3%)')
  console.log('   ‚Ä¢ Platina: R$ 7,50 ‚Üí R$ 4,25 (-43.3%)')
  console.log('   ‚Ä¢ Diamante: R$ 15,00 ‚Üí R$ 6,00 (-60%)')
  console.log('')
  console.log('üöÄ RECOMENDA√á√ÉO: IMPLEMENTAR A OP√á√ÉO 3')
  console.log('   Os pre√ßos propostos tornam o sistema:')
  console.log('   ‚Ä¢ Mais atrativo para jogadores')
  console.log('   ‚Ä¢ Equilibrado em termos de ROI')
  console.log('   ‚Ä¢ Acess√≠vel para diferentes perfis de usu√°rios')
  console.log('   ‚Ä¢ Competitivo no mercado de jogos')
  
  await prisma.$disconnect()
}

analyzePackPricesWithRealValues().catch(console.error)