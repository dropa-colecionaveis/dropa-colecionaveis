generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String?
  password                String?
  credits                 Int                      @default(0)
  hasReceivedFreePack     Boolean                  @default(false)
  role                    UserRole                 @default(USER)
  isActive                Boolean                  @default(true)
  emailVerified           Boolean                  @default(false)
  emailVerifiedAt         DateTime?
  lastLoginAt             DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  provider                String?
  providerAccountId       String?
  profileImage            String?
  profileVisibility       ProfileVisibility        @default(PUBLIC)
  adminLogs               AdminLog[]
  autoSellConfig          AutoSellConfig?
  autoSellLogs            AutoSellLog[]
  dailyRewardClaims       DailyRewardClaim[]
  emailVerificationTokens EmailVerificationToken[]
  freePackGrants          FreePackGrant[]
  uniqueItems             Item[]                   @relation("UniqueItems")
  marketplaceListings     MarketplaceListing[]
  marketplacePurchases    MarketplaceTransaction[] @relation("Buyer")
  marketplaceSales        MarketplaceTransaction[] @relation("Seller")
  packOpenings            PackOpening[]
  passwordResetTokens     PasswordResetToken[]
  payments                Payment[]
  rankings                Ranking[]
  transactions            Transaction[]
  userAchievements        UserAchievement[]
  userCollections         UserCollection[]
  userItemProtections     UserItemProtection[]
  userItems               UserItem[]
  userStats               UserStats?

  @@map("users")
}

model Item {
  id               String           @id @default(cuid())
  name             String
  description      String?
  imageUrl         String
  rarity           Rarity
  value            Int
  isActive         Boolean          @default(true)
  collectionId     String?
  itemNumber       Int?
  isLimitedEdition Boolean          @default(false)
  maxEditions      Int?
  currentEditions  Int              @default(0)
  isUnique         Boolean          @default(false)
  scarcityLevel    ScarcityLevel    @default(COMMON)
  uniqueOwnerId    String?
  isTemporal       Boolean          @default(false)
  availableFrom    DateTime?
  availableUntil   DateTime?
  createdAt        DateTime         @default(now())
  collection       Collection?      @relation(fields: [collectionId], references: [id])
  uniqueOwner      User?            @relation("UniqueItems", fields: [uniqueOwnerId], references: [id])
  limitedEditions  LimitedEdition[]
  userItems        UserItem[]

  @@map("items")
}

model Pack {
  id             String            @id @default(cuid())
  type           PackType?
  customTypeId   String?
  name           String
  description    String?
  price          Int
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  freePackGrants FreePackGrant[]
  packOpenings   PackOpening[]
  probabilities  PackProbability[]
  customType     PackTypeCustom?   @relation(fields: [customTypeId], references: [id])

  @@map("packs")
}

model PackProbability {
  id         String @id @default(cuid())
  packId     String
  rarity     Rarity
  percentage Float
  pack       Pack   @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@unique([packId, rarity])
  @@map("pack_probabilities")
}

model PackOpening {
  id        String   @id @default(cuid())
  userId    String
  packId    String
  itemId    String
  createdAt DateTime @default(now())
  pack      Pack     @relation(fields: [packId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pack_openings")
}

model FreePackGrant {
  id        String    @id @default(cuid())
  userId    String
  packId    String
  grantedAt DateTime  @default(now())
  claimed   Boolean   @default(false)
  claimedAt DateTime?
  pack      Pack      @relation(fields: [packId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("free_pack_grants")
}

model UserItem {
  id                  String               @id @default(cuid())
  userId              String
  itemId              String
  obtainedAt          DateTime             @default(now())
  limitedEditionId    String?
  marketplaceListings MarketplaceListing[]
  protection          UserItemProtection?
  item                Item                 @relation(fields: [itemId], references: [id], onDelete: Cascade)
  limitedEdition      LimitedEdition?      @relation(fields: [limitedEditionId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_items")
}

model Transaction {
  id                       String          @id @default(cuid())
  userId                   String
  type                     TransactionType
  amount                   Int
  description              String?
  createdAt                DateTime        @default(now())
  marketplaceTransactionId String?
  user                     User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Collection {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String?
  themeId          String?
  customTheme      String?
  imageUrl         String?
  maxItems         Int
  isActive         Boolean          @default(true)
  isLimited        Boolean          @default(false)
  isTemporal       Boolean          @default(false)
  availableFrom    DateTime?
  availableUntil   DateTime?
  collectionRarity Rarity?
  scarcityLevel    ScarcityLevel    @default(COMMON)
  totalSupply      Int?
  currentSupply    Int              @default(0)
  createdAt        DateTime         @default(now())
  theme            Theme?           @relation(fields: [themeId], references: [id])
  items            Item[]
  userCollections  UserCollection[]

  @@map("collections")
}

model Theme {
  id          String       @id @default(cuid())
  name        String       @unique
  displayName String
  description String?
  emoji       String       @default("ðŸ“š")
  colorClass  String       @default("from-gray-500/20 to-slate-500/20")
  borderClass String       @default("border-gray-500/30")
  isActive    Boolean      @default(true)
  isSystem    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  collections Collection[]

  @@map("themes")
}

model UserCollection {
  id           String     @id @default(cuid())
  userId       String
  collectionId String
  itemsOwned   Int        @default(0)
  completedAt  DateTime?
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
  @@map("user_collections")
}

model LimitedEdition {
  id           String     @id @default(cuid())
  itemId       String
  serialNumber Int
  mintedAt     DateTime   @default(now())
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userItems    UserItem[]

  @@unique([itemId, serialNumber])
  @@map("limited_editions")
}

model MarketplaceListing {
  id           String                   @id @default(cuid())
  userItemId   String
  sellerId     String
  price        Int
  description  String?
  status       ListingStatus            @default(ACTIVE)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  seller       User                     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  userItem     UserItem                 @relation(fields: [userItemId], references: [id], onDelete: Cascade)
  transactions MarketplaceTransaction[]

  @@map("marketplace_listings")
}

model MarketplaceTransaction {
  id             String             @id @default(cuid())
  listingId      String
  buyerId        String
  sellerId       String
  amount         Int
  marketplaceFee Int
  status         TransactionStatus  @default(PENDING)
  createdAt      DateTime           @default(now())
  completedAt    DateTime?
  buyer          User               @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  listing        MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  seller         User               @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("marketplace_transactions")
}

model Achievement {
  id               String              @id @default(cuid())
  name             String              @unique
  description      String
  icon             String
  category         AchievementCategory
  type             AchievementType
  condition        Json
  points           Int
  isSecret         Boolean             @default(false)
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  isCompleted   Boolean     @default(false)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserStats {
  id                   String    @id @default(cuid())
  userId               String    @unique
  totalXP              Int       @default(0)
  level                Int       @default(1)
  totalPacksOpened     Int       @default(0)
  totalCreditsSpent    Int       @default(0)
  totalItemsCollected  Int       @default(0)
  collectionsCompleted Int       @default(0)
  marketplaceSales     Int       @default(0)
  marketplacePurchases Int       @default(0)
  rareItemsFound       Int       @default(0)
  epicItemsFound       Int       @default(0)
  legendaryItemsFound  Int       @default(0)
  currentStreak        Int       @default(0)
  longestStreak        Int       @default(0)
  lastActivityAt       DateTime?
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model Ranking {
  id        String          @id @default(cuid())
  userId    String
  category  RankingCategory
  position  Int
  value     Int
  seasonId  String?
  updatedAt DateTime        @updatedAt
  season    Season?         @relation(fields: [seasonId], references: [id])
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, seasonId])
  @@index([category, seasonId, position])
  @@map("rankings")
}

model Season {
  id        String    @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean   @default(true)
  rewards   Json
  createdAt DateTime  @default(now())
  rankings  Ranking[]

  @@map("seasons")
}

model AutoSellConfig {
  id            String   @id @default(cuid())
  userId        String   @unique
  sellCommon    Boolean  @default(true)
  sellUncommon  Boolean  @default(true)
  sellRare      Boolean  @default(false)
  sellEpic      Boolean  @default(false)
  sellLegendary Boolean  @default(false)
  keepQuantity  Int      @default(1)
  sellLimitedEd Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auto_sell_configs")
}

model AutoSellLog {
  id         String   @id @default(cuid())
  userId     String
  userItemId String
  itemName   String
  price      Int
  configUsed Json
  status     String
  reason     String?
  listingId  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@map("auto_sell_logs")
}

model UserItemProtection {
  id         String   @id @default(cuid())
  userId     String
  userItemId String   @unique
  protected  Boolean  @default(true)
  reason     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userItem   UserItem @relation(fields: [userItemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_item_protections")
}

model AdminLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action])
  @@map("admin_logs")
}

model Payment {
  id              String         @id @default(cuid())
  userId          String
  externalId      String?
  status          PaymentStatus  @default(PENDING)
  method          PaymentMethod
  amount          Float
  credits         Int
  packageId       Int?
  creditPackageId String?
  mercadoPagoData Json?
  pixQrCode       String?
  pixQrCodeBase64 String?
  pixCopyPaste    String?
  expiresAt       DateTime?
  approvedAt      DateTime?
  failedAt        DateTime?
  failureReason   String?
  webhookData     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  creditPackage   CreditPackage? @relation(fields: [creditPackageId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([externalId])
  @@index([creditPackageId])
  @@map("payments")
}

model EmailVerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model StatsMonitoringLog {
  id                   Int      @id @default(autoincrement())
  timestamp            DateTime
  inconsistenciesFound Int      @map("inconsistencies_found")
  autoFixedUsers       Int      @map("auto_fixed_users")
  criticalErrors       Int      @map("critical_errors")
  healthStatus         String   @map("health_status") @db.VarChar(20)
  createdAt            DateTime @default(now()) @map("created_at")

  @@map("stats_monitoring_log")
}

model CreditPackage {
  id           String    @id @default(cuid())
  credits      Int
  price        Float
  isActive     Boolean   @default(true)
  isPopular    Boolean   @default(false)
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  payments     Payment[]

  @@index([isActive, displayOrder])
  @@map("credit_packages")
}

model PackTypeCustom {
  id           String        @id @default(cuid())
  name         String        @unique
  displayName  String
  emoji        String        @default("ðŸ“¦")
  color        String        @default("#6b7280")
  description  String?
  isActive     Boolean       @default(true)
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dailyRewards DailyReward[]
  packs        Pack[]

  @@map("pack_types_custom")
}

model DailyReward {
  id          String             @id @default(cuid())
  day         Int
  rewardType  RewardType
  rewardValue Int
  packTypeId  String?
  description String
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  claims      DailyRewardClaim[]
  packType    PackTypeCustom?    @relation(fields: [packTypeId], references: [id])

  @@unique([day, rewardType])
  @@map("daily_rewards")
}

model DailyRewardClaim {
  id             String      @id @default(cuid())
  userId         String
  rewardId       String
  streakDay      Int
  claimedAt      DateTime    @default(now())
  rewardReceived Json
  reward         DailyReward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardId, streakDay])
  @@map("daily_reward_claims")
}

model stats_audit_log {
  id           Int       @id @default(autoincrement())
  user_id      String    @db.VarChar(255)
  action       String    @db.VarChar(50)
  before_state Json?
  after_state  Json?
  metadata     Json?
  source       String    @db.VarChar(20)
  success      Boolean
  error        String?
  timestamp    DateTime  @db.Timestamp(6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)

  @@index([source], map: "idx_stats_audit_source")
  @@index([success, timestamp(sort: Desc)], map: "idx_stats_audit_success_timestamp")
  @@index([user_id, timestamp(sort: Desc)], map: "idx_stats_audit_user_timestamp")
}

enum Rarity {
  COMUM
  INCOMUM
  RARO
  EPICO
  LENDARIO
}

enum PackType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  PURCHASE_CREDITS
  PACK_PURCHASE
  MARKETPLACE_SALE
  MARKETPLACE_PURCHASE
  MARKETPLACE_FEE
  ADMIN_CREDIT_GRANT
}

enum AchievementCategory {
  COLLECTOR
  TRADER
  EXPLORER
  SOCIAL
  SPECIAL
  MILESTONE
  DAILY
}

enum AchievementType {
  PROGRESS
  MILESTONE
  COLLECTION
  STREAK
  RARE
}

enum RankingCategory {
  TOTAL_XP
  PACK_OPENER
  COLLECTOR
  TRADER
  WEEKLY_ACTIVE
  MONTHLY_ACTIVE
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
  REFUNDED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

enum ScarcityLevel {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
  UNIQUE
}

enum RewardType {
  CREDITS
  PACK
  ITEMS
}
